Менеджер библиотеки

Пакет

LIBEDIT - менеджер библиотеки. Библиотека определяется как файл /REL,
содержащий один или несколько модулей или подпрограмм. Он может читать
файлы /REL и выполнять любую из пяти функций: сканировать библиотеку и
распечатывать все имена модулей и точки входа, копировать подпрограмму
в новый файл /REL, удалять подпрограмму из библиотеки, заменять под-
программу или вставить новую подпрограмму. Вы всегда должны работать с
резервной копией любой полезной библиотеки, особенно FORLIB/REL.
Несмотря на то, что LIBEDIT никогда не будет преднамеренно перезаписы-
вать входной файл, всегда разумно хранить имена файлов только копий
важных файлов вне любого программного обеспечения, столь же мощного,
как LIBEDIT.

Пакет менеджера библиотеки доступен в исходном коде RATFOR. Он состоит
из основной программы LIBEDT и модулей LOGIC, RDPROG, ICFACT, HEXER,
FILER, FDUPCK, IBFTCH, BFETCH и WRIREL. Модуль TEST включен для проверки
работы менеджера библиотек с собственным файлом /REL. Вы можете
скомпилировать свой менеджер библиотеки в файл /CMD с помощью команды

do qrat (p=libedit)

Каждый раз, когда файл LIBEDIT/CMD находится на диске вашего компьютера,
вы можете вызвать его с помощью команды "libedit" в приглашении LDOS.
Программа полностью управляется простыми меню и никаких инструкций не
требуется. Просто продолжайте и используйте это. Первое, что вам нужно
сделать, это выяснить, какие файлы /REL доступны для просмотра на вашем
компьютере, с помощью команды "dir $/rel". Затем выберите один, вызо-
вите LIBEDIT и просканируйте его. Следует иметь в виду, что LIBEDIT пе-
рейдет к принтеру, если он включен и готов. Для вывода на экран отклю-
чите принтер.

Вы можете использовать менеджер библиотеки для дизассемблирования файлов
/REL. Для этого запишите модуль, который вы хотите разобрать, в новый
файл /REL. Затем используйте опцию "Scan library" (Сканировать библио-
теку), чтобы получить всю доступную информацию о точках входа и внешних
ссылках на файл. Эта информация должна быть распечатана для дальнейшего
использования. Затем используйте L80 для загрузки в файл /CMD, НЕ ДОСТУПНО
для FORLIB/REL. Это важно, потому что FORLIB/REL будет автоматически ска-
нироваться, если он доступен, и, вероятно, ваш файл /CMD будет намного
больше, чем нужно. Вы можете временно переименовать FORLIB/REL, если это
наиболее удобный способ предотвратить его связь с модулем, который нужно
разобрать. Затем просто разберите файл /CMD на принтер или дисковый файл
и перенесите информацию о точках входа и внешних ссылках, которые вы рас-
печатали с помощью менеджера библиотек.

Роль RATFOR

RATFOR работает с компилятором Tandy/Microsoft FORTRAN 66 F80, загрузчиком
компоновки L80 и, опционально, с макроассемблером M80. Таким образом, вы
можете использовать этот менеджер библиотек для библиотек, состоящих из прог-
рамм RATFOR, FORTRAN или ассемблера или любой их комбинации.

Модули

Ниже кратко описаны модули LIBEDIT/RAT.

LIBEDT

Основная программа LIBEDT считывает имя файла библиотеки, которую нужно ис-
следовать или использовать. Расширение /REL добавляется, файл открывается,
и меню печатается. При выборе меню дополнительные данные, такие как номера
модулей и имена файлов, запрашиваются и считываются с клавиатуры по мере
необходимости для выполнения команды в соответствии с выбором меню. Осталь-
ные файлы открываются по мере необходимости. Наконец, есть цикл с модулями
входного файла.

LOGIC

Модуль LOGIC использует выбор меню для установки множества флагов в програм-
мном блоке COMMON, которые определяют действия различных других модулей. Вся
логика программы, не выполняемая в основном цикле программы для номера модуля,
определяется этими флагами.

RDPROG

Модуль RDPROG считывает модуль из входного файла. Входным файлом может быть
исследуемая библиотека или новый модуль, который нужно заменить или вставить
в редактируемую библиотеку. Каждый файл представляет собой битовый поток,
начинающийся на границе байта. Битовый поток состоит из набора четырехбито-
вых флагов типа данных. За флагами имени, такими как объявления символов,
следуют поля ASCII. За другими флагами следуют двоичные данные. При необхо-
димости считываются данные ASCII, а двоичные данные считываются и преобра-
зуются в шестнадцатеричный код ASCII для вывода. Модуль ICFACT вызывается для
обработки каждого флага типа данных.

ICFACT

Этот модуль вызывается RDPROG для выполнения функций вывода. Иногда вывод не
подходит, например, когда библиотека сканируется, чтобы найти подходящую точку
для вставки, замены или удаления модуля. В этих случаях ICFACT просто возвра-
щается к RDPROG без каких-либо действий.

ICFACT может правильно обработать все 16 флагов типов данных. 

Это:
     0 Объявление символа ВХОДА
     1 Объявление имени COMMON
     2 Имя подпрограммы
     3 Объявление внешнего символа
     4 Зарезервированное (неопределенное) объявление символа типа
     5 Объявление общей длины
     6 ВНЕШНЯЯ ссылка на имя и локальный адрес
     7 Объявление имени точки ВХОДА и локальный адрес
     8 Неопределенное имя и локальный адрес
     9 ВНЕШНЯЯ ссылка со смещением
    10 Декларация размера ДАННЫХ
    11 Установить счетчик относительного адреса
    12 Адрес цепочки для символа с множественной ссылкой
    13 Установите абсолютный размер программы
    14 Конец подпрограммы
    15 Конец файла

В ICFACT есть шаблон. Массив ACTFLG состоит из шестнадцати элементов, каждый из
которых соответствует флагу типа данных. Если элемент ACTFLG установлен в ноль,
ICFACT просто возвращается, не выполняя никаких действий. При поставке значения
для флагов типа данных 0, 1, 11 и 12 установлены в ноль. Вы можете изменить эти
флаги по своему вкусу. Четыре замаскированных в дистрибутиве копии были установ-
лены в соответствии со следующей логикой: точки входа и имена COMMON могут быть
легко найдены при дизассемблировании по контексту. Сброс счетчика относительных
адресов - это функция учета загрузчика, передающая мало информации. Вы можете
отслеживать адреса цепочки из дизассемблированного файла, потому что они являются
относительными шестнадцатеричными адресами, которые образуют цепочку, которая
начинается с внешней ссылки и заканчивается нулевым адресом.

HEXER

Этот модуль используется для создания шестнадцатеричного ASCII из 16-битных
двоичных целых чисел для вывода. Вы можете использовать этот модуль или его
вариант всякий раз, когда вам нужно записать данные в шестнадцатеричном формате.

FILER

Этот модуль работает с именем файла ASCII, считываемым с клавиатуры. Он переводит
имя в верхний регистр, если оно в нижнем регистре, и добавляет расширение "/REL".
Если диск был указан, ":<n>" сохраняется и добавляется после расширения, чтобы
сохранить спецификацию диска.

FDUPCK

Этот модуль сравнивает два имени файла. Если они не совпадают, включая специ-
фикацию диска, никаких действий не предпринимается. Если они совпадают, на экран
выводится сообщение «** Повторяющееся имя файла», и программа завершается опера-
тором STOP.

Эта программа предназначена для предотвращения случайной записи пользователем
поверх входной библиотеки. Однако его можно обмануть, например, используя inlib
и inlib:0. Поэтому НИКОГДА не используйте свою единственную копию важной библио-
теки. Это особенно важно, если у вас нет исходного кода для восстановления библио-
теки. FORLIB/REL - наиболее важный пример библиотеки, которую НИКОГДА не следует
использовать с помощью LIBEDIT, если не доступно несколько других резервных копий.

IBFTCH

Модуль IBFTCH - это утилита, которая выбирает от одного до восьми битов из
входного потока битов. Она реализована как ФУНКЦИЯ, и количество извлекаемых битов
передается ей в качестве единственного аргумента. Если количество выбираемых битов
равно нулю, выборка принудительно ограничивается байтовой границей.

BFETCH

Этот модуль называется IBFTCH. Его цель-последовательно считывать 8-битные байты
из одного, двух входных файлов. Для скорости используется двоичный ввод-вывод и
два двоичных 256-байтовых буфера. Кроме того, флаг проверяется на вывод. Если он
установлен,данные из входного файла записываются в выходной файл по мере их чтения
байт за байтом.

WRIREL

Этот модуль вызывается BFETCH для записи отредактированных файлов библиотеки и
модулей вывода, извлеченных из библиотек. Двоичный выход используется для ско-
рости. Используется единственный 256-байтовый буфер. Он вызывается основной прог-
раммой LIBEDT перед выходом, чтобы записать конец байта файла и очистить выход-
ной буфер.

TEST

Этот модуль включен с единственной целью - предоставить модуль для извлечения с
использованием LIBEDIT PI/REL в качестве входной библиотеки. Это простая подпро-
грамма без аргументов, которая выводит значение числа Пи, вычисленное с помощью
4*ATAN(1.).

Версия для CP/M

Исходный код менеджера библиотек адаптирован для работы под управлением ОС CP/M.
Изменения в основном коснулись подпрогаммы FILER, вызванные оличием спецификации
файлов. В прогамме изменены размерности массивов для хранения файловой специфика-
ции с 15 на 11 символов. В прогамме LIBEDT это infile(11),otfile(11),nwfile(11)),
в подпрограмме FILER - fname(11) и в подпрограмме FDUPCK fname1(11),fname2(11).
Файлу с исходным кодом менеджера библиотек для CP/M прсвоено имя LIBEDCPM.RAT.
В полпрограммах FILER и FDUPCK закоментированы описания операторов COMMOM /flags/,
так как переменные из них не используются в этих подпрограммах. Все операторы print
заменены на write для возможности использования программой rat4. Исходный код
отформатрован в вид более понятный при чтении. Остальной код не потребовал внесения
изменний.
